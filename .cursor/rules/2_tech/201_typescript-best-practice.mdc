---
description: TypeScriptのコーディングに関するベストプラクティスです
globs: **/*.ts,**/*.tsx,**/*.d.ts
alwaysApply: false
---


## 型システム
- オブジェクト定義にはtypeよりinterfaceを優先する
- ユニオン型、インターセクション型、マップ型にはtypeを使用する
- `any`は避け、不明な型には`unknown`を使用する
- strict TypeScript設定を有効にする
- TypeScript組み込みのユーティリティ型を活用する
- 再利用可能な型パターンにはジェネリックを使用する

## 命名規則
- 型名とインターフェースにはPascalCaseを使用
- 変数と関数にはcamelCaseを使用
- 定数にはUPPER_CASEを使用
- 補助動詞を含む説明的な名前を使用（例：isLoading、hasError）
- Reactのpropsインターフェースには'Props'プレフィックスを付与（例：ButtonProps）

## コード構成
- 型定義は使用箇所の近くに配置
- 共有型は専用の型ファイルからエクスポート
- エクスポート整理にはバレルエクスポート（index.ts）を使用
- 共有型は`types`ディレクトリに配置
- コンポーネントのpropsは該当コンポーネントと同じ場所に配置

## 関数
- 公開関数には明示的な戻り型を指定
- コールバックやメソッドにはアロー関数を使用
- カスタムエラー型を使用した適切なエラー処理を実装
- 複雑な型シナリオには関数オーバーロードを使用
- Promiseよりasync/awaitを優先

## ベストプラクティス
- tsconfig.jsonでstrictモードを有効化
- 不変プロパティにはreadonlyを使用
- 型安全性のために判別共用体を活用
- ランタイム型チェックには型ガードを使用
- 適切なnullチェックを実装
- 必要な場合以外は型アサーションを避ける

## エラー処理
- ドメイン固有エラーにはカスタムエラー型を作成
- 失敗可能性のある操作にはResult型を使用
- 適切なエラーバウンダリを実装
- 型付きcatch節でtry-catchブロックを使用
- Promiseの拒否を適切に処理

## パターン
- 複雑なオブジェクト作成にはBuilderパターンを使用
- データアクセスにはRepositoryパターンを実装
- オブジェクト作成にはFactoryパターンを使用
- 依存性注入を活用
- カプセル化にはModuleパターンを使用